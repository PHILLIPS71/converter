// <auto-generated />
using System;
using Giantnodes.Service.Supervisor.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Giantnodes.Service.Supervisor.Persistence.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250606070011_v0.0.1")]
    partial class v001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "ltree");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Giantnodes.Service.Supervisor.Domain.Aggregates.Entries.FileSystemEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Giantnodes.Service.Supervisor.Domain.Aggregates.Libraries.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DirectoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("directory_id");

                    b.Property<bool>("IsMonitoring")
                        .HasColumnType("boolean")
                        .HasColumnName("is_monitoring");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_libraries");

                    b.HasIndex("DirectoryId")
                        .IsUnique()
                        .HasDatabaseName("ix_libraries_directory_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_libraries_name");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_libraries_slug");

                    b.ToTable("libraries", "public");
                });

            modelBuilder.Entity("Giantnodes.Service.Supervisor.Domain.Aggregates.Pipelines.Pipeline", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("definition");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_pipelines");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_pipelines_name");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_pipelines_slug");

                    b.ToTable("pipelines", "public");
                });

            modelBuilder.Entity("Giantnodes.Service.Supervisor.Domain.Aggregates.Pipelines.PipelineExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("definition");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid")
                        .HasColumnName("pipeline_id");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_pipeline_executions");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_pipeline_executions_file_id");

                    b.HasIndex("PipelineId")
                        .HasDatabaseName("ix_pipeline_executions_pipeline_id");

                    b.ToTable("pipeline_executions", "public");
                });

            modelBuilder.Entity("Giantnodes.Service.Supervisor.Domain.Aggregates.Entries.Directories.FileSystemDirectory", b =>
                {
                    b.HasBaseType("Giantnodes.Service.Supervisor.Domain.Aggregates.Entries.FileSystemEntry");

                    b.Property<DateTime>("ScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scanned_at");

                    b.ToTable("directories", "public");
                });

            modelBuilder.Entity("Giantnodes.Service.Supervisor.Domain.Aggregates.Entries.Files.FileSystemFile", b =>
                {
                    b.HasBaseType("Giantnodes.Service.Supervisor.Domain.Aggregates.Entries.FileSystemEntry");

                    b.ToTable("files", "public");
                });

            modelBuilder.Entity("Giantnodes.Service.Supervisor.Domain.Aggregates.Entries.FileSystemEntry", b =>
                {
                    b.HasOne("Giantnodes.Service.Supervisor.Domain.Aggregates.Entries.Directories.FileSystemDirectory", "Parent")
                        .WithMany("Entries")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Giantnodes.Service.Supervisor.Domain.Aggregates.Libraries.Library", b =>
                {
                    b.HasOne("Giantnodes.Service.Supervisor.Domain.Aggregates.Entries.Directories.FileSystemDirectory", "Directory")
                        .WithMany()
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_libraries_directories_directory_id");

                    b.Navigation("Directory");
                });

            modelBuilder.Entity("Giantnodes.Service.Supervisor.Domain.Aggregates.Pipelines.PipelineExecution", b =>
                {
                    b.HasOne("Giantnodes.Service.Supervisor.Domain.Aggregates.Entries.Files.FileSystemFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pipeline_executions_files_file_id");

                    b.HasOne("Giantnodes.Service.Supervisor.Domain.Aggregates.Pipelines.Pipeline", "Pipeline")
                        .WithMany("Executions")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pipeline_executions_pipelines_pipeline_id");

                    b.OwnsOne("Giantnodes.Service.Supervisor.Domain.Aggregates.Pipelines.PipelineFailure", "Failure", b1 =>
                        {
                            b1.Property<Guid>("PipelineExecutionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("FailedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("failure_failed_at");

                            b1.Property<string>("Reason")
                                .IsRequired()
                                .HasColumnType("citext")
                                .HasColumnName("failure_reason");

                            b1.HasKey("PipelineExecutionId");

                            b1.ToTable("pipeline_executions", "public");

                            b1.WithOwner()
                                .HasForeignKey("PipelineExecutionId")
                                .HasConstraintName("fk_pipeline_executions_pipeline_executions_id");
                        });

                    b.Navigation("Failure");

                    b.Navigation("File");

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("Giantnodes.Service.Supervisor.Domain.Aggregates.Entries.Directories.FileSystemDirectory", b =>
                {
                    b.OwnsOne("Giantnodes.Service.Supervisor.Domain.Values.PathInfo", "PathInfo", b1 =>
                        {
                            b1.Property<Guid>("FileSystemDirectoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<byte[]>("ConcurrencyToken")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("bytea")
                                .HasColumnName("concurrency_token");

                            b1.Property<string>("Container")
                                .HasColumnType("text")
                                .HasColumnName("path_info_container");

                            b1.Property<string>("DirectoryPath")
                                .HasColumnType("citext")
                                .HasColumnName("path_info_directory_path");

                            b1.Property<char>("DirectorySeparatorChar")
                                .HasColumnType("character(1)")
                                .HasColumnName("path_info_directory_separator_char");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("citext")
                                .HasColumnName("path_info_full_name");

                            b1.Property<string>("FullNameNormalized")
                                .IsRequired()
                                .HasColumnType("ltree")
                                .HasColumnName("path_info_full_name_normalized");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("citext")
                                .HasColumnName("path_info_name");

                            b1.HasKey("FileSystemDirectoryId");

                            b1.HasIndex("FullName")
                                .IsUnique()
                                .HasDatabaseName("ix_directories_path_info_full_name");

                            b1.HasIndex("FullNameNormalized")
                                .HasDatabaseName("ix_directories_path_info_full_name_normalized");

                            NpgsqlIndexBuilderExtensions.HasMethod(b1.HasIndex("FullNameNormalized"), "gist");

                            b1.ToTable("directories", "public");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemDirectoryId")
                                .HasConstraintName("fk_directories_directories_id");
                        });

                    b.Navigation("PathInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Giantnodes.Service.Supervisor.Domain.Aggregates.Entries.Files.FileSystemFile", b =>
                {
                    b.OwnsOne("Giantnodes.Service.Supervisor.Domain.Values.PathInfo", "PathInfo", b1 =>
                        {
                            b1.Property<Guid>("FileSystemFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<byte[]>("ConcurrencyToken")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("bytea")
                                .HasColumnName("concurrency_token");

                            b1.Property<string>("Container")
                                .HasColumnType("text")
                                .HasColumnName("path_info_container");

                            b1.Property<string>("DirectoryPath")
                                .HasColumnType("citext")
                                .HasColumnName("path_info_directory_path");

                            b1.Property<char>("DirectorySeparatorChar")
                                .HasColumnType("character(1)")
                                .HasColumnName("path_info_directory_separator_char");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("citext")
                                .HasColumnName("path_info_full_name");

                            b1.Property<string>("FullNameNormalized")
                                .IsRequired()
                                .HasColumnType("ltree")
                                .HasColumnName("path_info_full_name_normalized");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("citext")
                                .HasColumnName("path_info_name");

                            b1.HasKey("FileSystemFileId");

                            b1.HasIndex("FullName")
                                .IsUnique()
                                .HasDatabaseName("ix_files_path_info_full_name");

                            b1.HasIndex("FullNameNormalized")
                                .HasDatabaseName("ix_files_path_info_full_name_normalized");

                            NpgsqlIndexBuilderExtensions.HasMethod(b1.HasIndex("FullNameNormalized"), "gist");

                            b1.ToTable("files", "public");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemFileId")
                                .HasConstraintName("fk_files_files_id");
                        });

                    b.OwnsMany("Giantnodes.Service.Supervisor.Domain.Values.AudioStream", "AudioStreams", b1 =>
                        {
                            b1.Property<Guid>("FileSystemFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("file_system_file_id");

                            b1.Property<Guid>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<long>("Bitrate")
                                .HasColumnType("bigint")
                                .HasColumnName("bitrate");

                            b1.Property<int>("Channels")
                                .HasColumnType("integer")
                                .HasColumnName("channels");

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("codec");

                            b1.Property<bool>("Default")
                                .HasColumnType("boolean")
                                .HasColumnName("default");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("interval")
                                .HasColumnName("duration");

                            b1.Property<bool>("Forced")
                                .HasColumnType("boolean")
                                .HasColumnName("forced");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<string>("Language")
                                .HasColumnType("text")
                                .HasColumnName("language");

                            b1.Property<int>("SampleRate")
                                .HasColumnType("integer")
                                .HasColumnName("sample_rate");

                            b1.Property<string>("Title")
                                .HasColumnType("text")
                                .HasColumnName("title");

                            b1.HasKey("FileSystemFileId", "id")
                                .HasName("pk_audio_stream");

                            b1.ToTable("audio_stream", "public");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemFileId")
                                .HasConstraintName("fk_audio_stream_files_file_system_file_id");
                        });

                    b.OwnsMany("Giantnodes.Service.Supervisor.Domain.Values.SubtitleStream", "SubtitleStreams", b1 =>
                        {
                            b1.Property<Guid>("FileSystemFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("file_system_file_id");

                            b1.Property<Guid>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("codec");

                            b1.Property<bool>("Default")
                                .HasColumnType("boolean")
                                .HasColumnName("default");

                            b1.Property<bool>("Forced")
                                .HasColumnType("boolean")
                                .HasColumnName("forced");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<string>("Language")
                                .HasColumnType("text")
                                .HasColumnName("language");

                            b1.Property<string>("Title")
                                .HasColumnType("text")
                                .HasColumnName("title");

                            b1.HasKey("FileSystemFileId", "id")
                                .HasName("pk_subtitle_stream");

                            b1.ToTable("subtitle_stream", "public");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemFileId")
                                .HasConstraintName("fk_subtitle_stream_files_file_system_file_id");
                        });

                    b.OwnsMany("Giantnodes.Service.Supervisor.Domain.Values.VideoStream", "VideoStreams", b1 =>
                        {
                            b1.Property<Guid>("FileSystemFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("file_system_file_id");

                            b1.Property<Guid>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<long>("Bitrate")
                                .HasColumnType("bigint")
                                .HasColumnName("bitrate");

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("codec");

                            b1.Property<bool>("Default")
                                .HasColumnType("boolean")
                                .HasColumnName("default");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("interval")
                                .HasColumnName("duration");

                            b1.Property<bool>("Forced")
                                .HasColumnType("boolean")
                                .HasColumnName("forced");

                            b1.Property<double>("Framerate")
                                .HasColumnType("double precision")
                                .HasColumnName("framerate");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<string>("PixelFormat")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("pixel_format");

                            b1.Property<int?>("Rotation")
                                .HasColumnType("integer")
                                .HasColumnName("rotation");

                            b1.HasKey("FileSystemFileId", "id")
                                .HasName("pk_video_stream");

                            b1.ToTable("video_stream", "public");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemFileId")
                                .HasConstraintName("fk_video_stream_files_file_system_file_id");

                            b1.OwnsOne("Giantnodes.Service.Supervisor.Domain.Values.VideoQuality", "Quality", b2 =>
                                {
                                    b2.Property<Guid>("VideoStreamFileSystemFileId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("file_system_file_id");

                                    b2.Property<Guid>("VideoStreamid")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("AspectRatio")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("quality_aspect_ratio");

                                    b2.Property<int>("Height")
                                        .HasColumnType("integer")
                                        .HasColumnName("quality_height");

                                    b2.Property<int>("Resolution")
                                        .HasColumnType("integer")
                                        .HasColumnName("quality_resolution");

                                    b2.Property<int>("Width")
                                        .HasColumnType("integer")
                                        .HasColumnName("quality_width");

                                    b2.HasKey("VideoStreamFileSystemFileId", "VideoStreamid");

                                    b2.ToTable("video_stream", "public");

                                    b2.WithOwner()
                                        .HasForeignKey("VideoStreamFileSystemFileId", "VideoStreamid")
                                        .HasConstraintName("fk_video_stream_video_stream_file_system_file_id_id");
                                });

                            b1.Navigation("Quality")
                                .IsRequired();
                        });

                    b.Navigation("AudioStreams");

                    b.Navigation("PathInfo")
                        .IsRequired();

                    b.Navigation("SubtitleStreams");

                    b.Navigation("VideoStreams");
                });

            modelBuilder.Entity("Giantnodes.Service.Supervisor.Domain.Aggregates.Pipelines.Pipeline", b =>
                {
                    b.Navigation("Executions");
                });

            modelBuilder.Entity("Giantnodes.Service.Supervisor.Domain.Aggregates.Entries.Directories.FileSystemDirectory", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
